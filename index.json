[{"content":"Objective To understand how vSphere CSI driver works and is being deployed.\nvSphere CSI Driver Architecture vSphere CSI Driver Deployment vSphere CSI Driver is a Kubernetes Deployment that includes multiple containers and runs on the control plane node.\ncsi-snapshotter csi-snapshotter is the sidecar container that watches for VolumeSnapshotContent create/update/delete events. csi-snapshotter works with CSI snapshot controller together implement CSI snapshot function.\nSee Description and Github for further details.\ncsi-resizer csi-resizer is a sidecar container that watches the Kubernetes API server for PersistentVolumeClaim updates and triggers ControllerExpandVolume operation.\nSee Description and Github for further details.\ncsi-attacher csi-attacher is a sidecar container that attaches volumes to nodes by calling ControllerPublish and ControllerUnpublish functions of CSI drivers.\nSee Description and Github for further details.\ncsi-provisioner csi-provisioner is a sidecar container that provisions volumes by calling CreateVolume and DeleteVolume functions of CSI drivers. See Description and Github for further details.\nvsphere-syncer vsphere-syncer is a container with vSphere CSI controller pod that responsible for pushing the PV, PVC and pod metadata to CNS(Cloud Native Storage). See Github for further details.\nvsphere-csi-controller vsphere-csi-controller is the container within vSphere CSI controller that is responsible for volume provisining, attaching and detaching the volume to VMs, mounting, formatting and umounting volumes from the pod within the VM.\nSee Github for further details.\nvSphere CSI Node DaemonSet vSphere CSI Node is a Kubernetes DaemonSet running on each worker node.\nnode-driver-registrar node-driver-registrar is a sidecar container that registers the CSI driver within Kubelet using the kubelet plugin registration machanism so that Kubelets can issue CSI NodeGetInfo, NodeStageVolume, NodePublishVolume calls.\nSee Description and Github for further details.\nvsphere-csi-node vsphere-csi-node is the container that is responsible for volume provisining, attaching and detaching the volume to VMs, mounting, formatting and umounting volumes from the pod within the VM.\nSee Github for details.\nSnapshot controller Snapshot controller is responsible for managing snapshot objects and operations across multiple CSI drivers.\nsnapshot-controller See Description and Github for further details.\nsnapshot-validation-webhook See Description and Githb for further details.\nReference A Deep Dive into the Kubernetes vSphere CSI Driver with TKGI and TKG CSI driver for vSphere vSphere CSI Documentation Kubernetes CSI Documentation Kubernetes CSI Projects ","permalink":"https://bsdnet.github.io/posts/vsphere-csi-driver-illustrated/","summary":"Objective To understand how vSphere CSI driver works and is being deployed.\nvSphere CSI Driver Architecture vSphere CSI Driver Deployment vSphere CSI Driver is a Kubernetes Deployment that includes multiple containers and runs on the control plane node.\ncsi-snapshotter csi-snapshotter is the sidecar container that watches for VolumeSnapshotContent create/update/delete events. csi-snapshotter works with CSI snapshot controller together implement CSI snapshot function.\nSee Description and Github for further details.\ncsi-resizer csi-resizer is a sidecar container that watches the Kubernetes API server for PersistentVolumeClaim updates and triggers ControllerExpandVolume operation.","title":"vSphere CSI Driver Illustrated"},{"content":"Objective To illustrate kubernetes cluster architecture and understand critical Kubernetes components.\nKubernetes Cluster Architecture Control Plane Components Control Plane components run on one or mulptile control plane nodes.\nkube-apiserver kube-apiserver implements the Kubernetes API, and is designed to scale horizontally.\nkube-apiserver runs as a static pod.\netcd etcd is a consistent and highly-available key value store used for storing Kubernetes\u0026rsquo; cluster data.\netcd runs as a static pod.\nkube-scheduler kube-scheduler watches for newly created Pods and selects a node for Pods to run on.\nkube-scheduler runs as a static pod.\nkube-controller-manager kube-controller-manager implements Node, Job, EndpointSlice and ServiceAccount controllers.\nkube-controller-manager runs as a static pod.\ncloud-controller-manager cloud-controller-manager implements cloud-specfic control logic.\ncloud-controller-manager is optional. One example is vSphee Cloud Controller Manager.\nNode Components Node Components run on every node including Control Plane nodes.\nkubelet kubelet is the node agent that runs on each node, and make sure containers are running in a pod.\nkubelet runs as a systemd service.\nkube-proxy kube-proxy runs on each code as a network proxy that maintains network rules.\nkube-proxy usually runs as a DaemonSet.\nContainer runtime Container runtime such as containerd, CRI-O is reponsible for running containers.\nReferences Kubernetes Components ","permalink":"https://bsdnet.github.io/posts/kubernetes-cluster-architecture-illustrated/","summary":"Objective To illustrate kubernetes cluster architecture and understand critical Kubernetes components.\nKubernetes Cluster Architecture Control Plane Components Control Plane components run on one or mulptile control plane nodes.\nkube-apiserver kube-apiserver implements the Kubernetes API, and is designed to scale horizontally.\nkube-apiserver runs as a static pod.\netcd etcd is a consistent and highly-available key value store used for storing Kubernetes\u0026rsquo; cluster data.\netcd runs as a static pod.\nkube-scheduler kube-scheduler watches for newly created Pods and selects a node for Pods to run on.","title":"Kubernetes Cluster Architecture Illustrated"},{"content":"It will be helpful to understand modern software system like Kuberneteswith fundamental security concepts. For example, symmetric encryption, asymmetric encryption, public/private key, digital signature, certificate and signing.\nObjective Use diagram to illustrate critical security concepts used in modern software.\nConcepts Encryption Symmetric encryption uses same key for both encryption and decryption; while asymmetric encryption use different but mathematically relatedkeys for enryption and decryption. Symmetric Encyption can be illustrated in the following diagram: Asymmetric Encryption can be represented as follows: Message Digest A message digest is a fixed size numeric representation of the conents of a message, computed by a hash function. While an encypted message digest forms a digital signature.\nSigning Signing is widely used in today\u0026rsquo;s software system from Secure Boot to TLS/SSL communication via HTTPS. Not mention to software package signing or electronic document signing like DocuSign.\nHow senser signs a document digitally? How receiver verify the digital signature? Certificate Digital certificate is issued by a certificate authority(CA). Here is the digram to illustrate the process. To get a digital certificate, you need a pair of keys - public and private key. public key, its signature encrypted by private key, and organization information are packaged into Certificate Signing Request(CSR). The CSR will be approve and signed by a Certificate Authority(CA), and come back as a digital certificate. This certificate needs to be installed onto your server so that every browser client can talk with your server securely.\nOnce you got the certicate, you can understand how TLS/SSL cetificates work\nReferences How PGP works Overview of Symmetric Encryption OpenSSL 3.0 Doc SSL certificate explained Overview of SSL/TLS handshake PKI tutorial The illustrated TLS 1.3 Connection ","permalink":"https://bsdnet.github.io/posts/security-concepts-illustrated/","summary":"It will be helpful to understand modern software system like Kuberneteswith fundamental security concepts. For example, symmetric encryption, asymmetric encryption, public/private key, digital signature, certificate and signing.\nObjective Use diagram to illustrate critical security concepts used in modern software.\nConcepts Encryption Symmetric encryption uses same key for both encryption and decryption; while asymmetric encryption use different but mathematically relatedkeys for enryption and decryption. Symmetric Encyption can be illustrated in the following diagram: Asymmetric Encryption can be represented as follows: Message Digest A message digest is a fixed size numeric representation of the conents of a message, computed by a hash function.","title":"Security Concepts Illustrated"},{"content":"In Kubernetes 1.24, dockershim will be removed. What does it mean, let\u0026rsquo;s take a look the container stackbefore and after dockershim removal.\nObjective To walkthrough container stack on a Kubernetes node.\nBefore 1.24 release Since 1.24 release Walk-through Using the opportunity, we can walkthrough the container stack and corresponding tooling on a Kubernetes node from top to bottom.\napiserver apiserver sits on the Kubernetes master, validates and configures data for the api objects which include pods, services, replicationcontrollers and others. The API Server services REST operations and provides the cluster\u0026rsquo;s shared state.\nkubelet kublet is the primary node agent that runs on each Kubernetes node and register the node with the apiserver. kubelet manages pod using PodSpec in YAML or JSON format. kubelet implement the CRI client, and also have dockershim before Kubernete 1.24.\nCRI Container Runtime A container runtime is software that executes containers and manage container images. Container Runtime Interface(CRI) is a plugin interface which enables kubelet to use a wide variety of container runtimes without recompiling. CRI consists of a protocol buffers, gRPC API, and libraries. Popular contianer runtimes include docker engine, cri-o, contaienrd, and rktlet, frakti. dockershim in kubelet implements CRI interfaces; cri-o implements OCI conformant runtime; frakti is hypervisor-based container runtime while rktlet is the rkt contaienr runtime that is in frozen state.\ncontainerd is an OCI compliant core container runtime and provides minimum set of functinoality to execute containers and manages images. Other than container lifecycle management and image management, networking(CNI), volume(CSI) and persistent logging are not the scope of containerd. Now the original cri-containerd elvoves into cri package in containerd, and containerd becomes the default runtime in Kubernetes.\nThe biggest change in Kubernetes 1.24 is dockershim removal from kubelet source code. To keep docker engine as a container runtime, cri-dockerd is invented to bridge the gap.\nOCI Runtime Performance, security and compability results in multiple OCI compatible runtimes in Kubernetes Ecosystem.\nrunc is the default OCI runtime in kubernetes that spawns and runs containers on Linux. While crun is a fast and low-memory footprint OCI Ctontainer Runtime fully written in C. runsc in gVisor implement a sandbox mechanism by mapping system calls invoked in applications to less Linux system calls on the host kernel. runnc in Nabla Containers achieve the same by using less Linux system calls. kata-runtime is the OCI runtime in Kata Containers that builds a standard implementation of lightweight Virtual Machines (VMs) that feel and perform like containers, but provide the workload isolation and security advantages of VMs.\n","permalink":"https://bsdnet.github.io/posts/kubernetes-container-stack-illustrated/","summary":"In Kubernetes 1.24, dockershim will be removed. What does it mean, let\u0026rsquo;s take a look the container stackbefore and after dockershim removal.\nObjective To walkthrough container stack on a Kubernetes node.\nBefore 1.24 release Since 1.24 release Walk-through Using the opportunity, we can walkthrough the container stack and corresponding tooling on a Kubernetes node from top to bottom.\napiserver apiserver sits on the Kubernetes master, validates and configures data for the api objects which include pods, services, replicationcontrollers and others.","title":"Kubernetes Container Stack Illustrated"},{"content":"This post collects productivity tools used in my daily worklife.\nDocumenting Excalidraw: Draw a diagram DokuWiki: a Wiki for yourself Programming Visual Studio Code: Code editor SourceGraph: Search the code in Github OpenGrok: Search any code, host your own git: Distributed version control system github.com: Well known code repository Review Board: Code review tool Gerrit Code Review: Another code review tool: Another code review tool Jenkins: CI/CD tools JIRA: an enterprise bug tracking system Bugzilla: an open source bug tracking system remark: A simple, in-browser, markdown-driven slideshow tool. Linux Kernel Linux Kernel Cross Reference Linux Kernel CVEs ","permalink":"https://bsdnet.github.io/posts/productivity-tools/","summary":"This post collects productivity tools used in my daily worklife.\nDocumenting Excalidraw: Draw a diagram DokuWiki: a Wiki for yourself Programming Visual Studio Code: Code editor SourceGraph: Search the code in Github OpenGrok: Search any code, host your own git: Distributed version control system github.com: Well known code repository Review Board: Code review tool Gerrit Code Review: Another code review tool: Another code review tool Jenkins: CI/CD tools JIRA: an enterprise bug tracking system Bugzilla: an open source bug tracking system remark: A simple, in-browser, markdown-driven slideshow tool.","title":"Productivity Tools"},{"content":"This post describes how I created this blog website using a couple of hours.\nObjective The objective is to build a website using Hugo and Github Pages.\nSteps Follow the steps listed below:\nCreate a Github account if you do not have one\nCreate a Github Repository\nKeep in mind, you can\u0026rsquo;t use user name and password to access Git Repo now. You have to use a token a SSH key for the sake of security.\nGo through Hugo\u0026rsquo;s Quickstart Guide\nGo though Hugo on Github\nMake sure you delete public folder and add a .gitignore file.\nSet up Github Action workflow Make sure you enable \u0026rsquo;extended\u0026rsquo; if your theme needs.\nGo through Github Pages, and Settings\nProfit\nNow, you can use your favorite Editor, e.g Visual Code or Vim, to write blogs.\nSummary We learned and used the following concepts so far:\nMarkdown GitHub GitHub Repository Github Pages Github Actions Hugo Reference Here are list of links I refered to make this happen:\nMarkdown Guide Goldmark Mardown Hugo Quick Start Hugo on Github Github Pages GitHub Actions for Hugo GitHub Pages Action GitHub Actions GitHub Create a new repo ","permalink":"https://bsdnet.github.io/posts/hello-the-infra-guy/","summary":"This post describes how I created this blog website using a couple of hours.\nObjective The objective is to build a website using Hugo and Github Pages.\nSteps Follow the steps listed below:\nCreate a Github account if you do not have one\nCreate a Github Repository\nKeep in mind, you can\u0026rsquo;t use user name and password to access Git Repo now. You have to use a token a SSH key for the sake of security.","title":"Hello, The Infra Guy"}]